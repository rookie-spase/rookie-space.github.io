<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>智能指针</title>
    <link href="/2023/03/21/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/2023/03/21/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章讲述三个东西，shared_ptr,unique_ptr,weak_ptr</p></blockquote><p>智能指针就是会自动帮你释放内存的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">6</span>);<br><span class="hljs-keyword">delete</span> p;<br><br><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">4</span>))</span></span>;<br><span class="hljs-comment">// 不用释放</span><br></code></pre></td></tr></table></figure><h1 id="Shared-Ptr"><a href="#Shared-Ptr" class="headerlink" title="Shared_Ptr"></a>Shared_Ptr</h1><hr><p><code>shared_ptr</code>指针的特点就是可以让多个<code>shared_ptr</code>指向同一块内存，称为<code>共享</code>。</p><p>当没有<code>shared_ptr</code>指向这块内存的时候，就释放这块内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">shared_ptr&lt;string&gt; <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string(<span class="hljs-string">&quot;abc&quot;</span>))</span></span>;<span class="hljs-comment">// s1指向abc的内存块</span><br>    shared_ptr&lt;string&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// 不能用这种方式，这个涉及到从string指针转换到shared_ptr,而shared_ptr是不允许自动转换的</span><br>    shared_ptr&lt;string&gt; s2 = s1;<span class="hljs-comment">// s2指向abc内存块</span><br>    <br>    s1.<span class="hljs-built_in">reset</span>(<span class="hljs-literal">nullptr</span>);<span class="hljs-comment">// 设置s1指向nullptr，不在指向abc内存块。</span><br>      <span class="hljs-comment">//  现在s2指向内存块，而s1没有指向。abc内存块只被s2指向</span><br>    <span class="hljs-comment">//abc内存现在并没有被释放</span><br>    std::cout &lt;&lt; *s2;<span class="hljs-comment">// 输出&quot;abc&quot;，证明了s1不指向但由于s2指向，所以没有释放</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>shared_ptr默认的释放方式是，delete p</p></blockquote><h2 id="指向数组"><a href="#指向数组" class="headerlink" title="指向数组"></a>指向数组</h2><p>释放单个指针的方式，<code>delete p</code><br>释放一个数组的方式,<code>delete[] p</code></p><p>由于 <code>shared_ptr默认的释放方式是delete p </code>，那么就需要更改释放指针的方式，方法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">shared_ptr&lt;string&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string[<span class="hljs-number">4</span>])</span></span>;<span class="hljs-comment">// 默认delete p的释放</span><br>    <span class="hljs-function">shared_ptr&lt;string&gt; <span class="hljs-title">ptr2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string[<span class="hljs-number">4</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">       [](string* p)&#123; <span class="hljs-keyword">delete</span>[] p; &#125;</span></span><br><span class="hljs-params"><span class="hljs-function">                          )</span></span>;<span class="hljs-comment">// 默认delete[] p的释放</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个更改为<code>delete[] p</code>的东西(就是ptr2多出来的东西),是一个函数<code>称为lambda</code>，在要释放ptr2的内存的时候，将ptr2指向的内存作为参数传入给<code>lambda</code>的第一个<code>string* p</code>，然后这个函数调用<code>delete[] p</code>。</p><h2 id="shared-ptr总结"><a href="#shared-ptr总结" class="headerlink" title="shared_ptr总结"></a>shared_ptr总结</h2><ul><li>.reset()</li><li>.count() 得知有多少个shared_ptr正在指向目标内存</li><li>释放数组要在第二个参数指定lambda</li><li>赋值的时候不能自动转换<code>隐式转换</code></li></ul><h1 id="Weak-ptr"><a href="#Weak-ptr" class="headerlink" title="Weak_ptr"></a>Weak_ptr</h1><hr><h2 id="shared-ptr的问题-双向指向"><a href="#shared-ptr的问题-双向指向" class="headerlink" title="shared_ptr的问题-双向指向"></a>shared_ptr的问题-双向指向</h2><p>shared_ptr的机制是，当最后一个指向这个内存块的shared_ptr不在指向这个内存块时，就将这个内存块删除。</p><p>现在出现了这个情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br>    shared_ptr&lt;B&gt; obj_B;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span>&#123;<br>    shared_ptr&lt;A&gt; obj_A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>A中的成员指向b，B中的成员指向a。那么就会互相指向，导致内存无法释放.</p><h2 id="weak-ptr用法"><a href="#weak-ptr用法" class="headerlink" title="weak_ptr用法"></a>weak_ptr用法</h2><p>weak_ptr就是单纯的指向内存块，不会影响到shared_ptr的数量，当然，shared_ptr指向的内存块被删除的时候，所有指向这个内存块的weak_ptr都会为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">32</span>))</span></span>;<br>    weak_ptr&lt;<span class="hljs-type">int</span>&gt; b = a;<br><br>    *(b.<span class="hljs-built_in">lock</span>()) = <span class="hljs-number">33</span>;<br><br>    cout &lt;&lt; *(b.<span class="hljs-built_in">lock</span>());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><ul><li><p>lock()</p><p>weak_ptr要改这个内存块需要先调用lock(),lock()会返回一个新的shared_ptr指向这块内存</p></li></ul><h1 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h1><hr><p>这个指针和shared_ptr类似，但是unique_ptr只能一个指针指向一块内存，不能2个unique_ptr指向一个内存；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> p =     <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">32</span>);<br>    <span class="hljs-function">unique&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(p)</span></span>;<span class="hljs-comment">// 这就好了</span><br>    <span class="hljs-function">unique&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(p)</span> </span>; <span class="hljs-comment">// ERROR</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="转移拥有权"><a href="#转移拥有权" class="headerlink" title="转移拥有权"></a>转移拥有权</h2><p>使用std::move就可以转交拥有权了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">unique&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(std::move(p))</span></span>; <span class="hljs-comment">// OK,ptr指向空，ptr1指向p的内存</span><br></code></pre></td></tr></table></figure><h2 id="指向数组-1"><a href="#指向数组-1" class="headerlink" title="指向数组"></a>指向数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">unique&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>])</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象三大特性</title>
    <link href="/2023/03/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2023/03/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>三大特性：封装，继承，多态</p></blockquote><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>一个struct就是几个数据类型的集合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    A some_one;<br>    some_one.age = <span class="hljs-number">21</span>;<br>    some_one.name = <span class="hljs-string">&quot;ZhangSi&quot;</span>;<br>    some_one.work_place = <span class="hljs-string">&quot;ShangHai&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>main函数相对于结构体A来说是外人，main在结构体A之外。而main作为一个外人，将some_one中的数据给更改了。</p><p>问题：一个人的{名字,年龄,工作地点}被外人更改了；</p><p>解决办法：使用class加上访问控制</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Class是数据类型和函数的集合，class的数据类型和函数统称为<code>成员</code>，class可以指定哪些可以被外人看见。<br>上面的classA，将数据成员指定为private，意思是A的这三个成员不能被外人访问。<br>若是<code>public</code>，那么效果和structA一样。</p><p>所以，现在介绍的<code>访问控制符</code>有</p><ul><li>private</li><li>public</li></ul><p>还有个是<code>protected</code>，这个关键字需要和继承的特性一起说。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>那么，既然数据成员已经不能被外人直接修改，也不能被外人直接访问。</p><p>给这个<code>classA</code>的成员赋值的方法就需要一个叫<code>构造函数</code>的东西。</p><blockquote><p>构造函数就是代替了赋值；外界传递参数给这个函数，这个函数利用参数给自己的成员赋值</p></blockquote><ul><li>构造函数需要从外界获取参数-&gt;构造函数是public的</li><li>构造函数的名字和类名一样</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> age,<span class="hljs-type">char</span>* name,<span class="hljs-type">char</span>* work_place)&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name  = name;<br>        <span class="hljs-keyword">this</span>.work_place = work_place;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*  更好的写法,结果是一样的，但这个效果要好一些</span><br><span class="hljs-comment">    A(int ae,char* nae,char* _place)</span><br><span class="hljs-comment">    :age(ae),name(nae),work_place(_place)&#123;&#125;</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/* 更更好的写法</span><br><span class="hljs-comment">    A(const int&amp; ae,const char* nae,const char* _place)</span><br><span class="hljs-comment">    :age(ae),name(nae),work_place(_place)&#123;&#125;</span><br><span class="hljs-comment">    */</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">some_one</span><span class="hljs-params">(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;ZhangSi&quot;</span>,<span class="hljs-string">&quot;ShangHai&quot;</span>)</span></span>;<span class="hljs-comment">//    就创建好了</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承代表的是一种属于关系</p><blockquote><p>鹰是一种鸟，鸟都会飞，鹰也将会飞。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>&#123;<span class="hljs-comment">// 称为基类或者父类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> further_count;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Grab_WithLeg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">owl</span>:<span class="hljs-keyword">public</span> Bird&#123;<span class="hljs-comment">// 称为派生类或者子类</span><br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    owl o1;<br>    o1.<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">// ok,调用Bird的fly()</span><br>    o1.<span class="hljs-built_in">Grab_WithLeg</span>(); <span class="hljs-comment">// ok,调用Bird的Grab_WithLeg()</span><br>    o1.further_count = <span class="hljs-number">3</span>; <span class="hljs-comment">// error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类owl继承自父类Bird，父类的<code>public</code>成员和<code>protected</code>成员可以让子类访问修改；</p><p>这里就可以抛出<code>protected</code>的用法了</p><ul><li><code>protected</code>指成员可以被子类访问和修改，但不能被外人访问和修改</li></ul><p>继承特点</p><ul><li><p>子类会继承父类所有数据和函数，但不是所有数据和函数子类都可以访问和修改</p></li><li><p>父类和子类关系图，如果要调用函数，那么</p><ol><li>在子类中找</li><li>在父类中找</li><li>在父类外找</li><li>报错</li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">--------------------------------------------------------<br>|<span class="hljs-string">父类   </span>|<br>|<span class="hljs-string"></span>|<br>|<span class="hljs-string"></span>|<br>|<span class="hljs-string">-----------------------      </span>|<br>|<span class="hljs-string"></span>|<span class="hljs-string">子类   </span>|<span class="hljs-string"></span>|<br>|<span class="hljs-string"></span>|<span class="hljs-string"></span>|<span class="hljs-string"></span>|<br>|<span class="hljs-string">--------------------------------------------------------</span>|<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">owl</span>:<span class="hljs-keyword">public</span> Bird&#123;<span class="hljs-comment">// 称为派生类或者子类</span><br>    <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    owl o1;<br>    o1.<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">// 调用owl的fly()，而不是Bird的fly</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="子类和父类的关系"><a href="#子类和父类的关系" class="headerlink" title="子类和父类的关系"></a>子类和父类的关系</h2><p>首先，子类包含父类的成员，那么就表明子类的成员一定比父类多。</p><p>所以<code>我们总能在子类中找到属于父类的部分</code>，这就是关系</p><p>如何表示这种<code>在子类中找到父类</code>的关系呢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drive</span>:<span class="hljs-keyword">public</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Base* bs = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Drive</span>();<br>bs-&gt;<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">//调用谁的fly()?</span><br>    bs-&gt;a = <span class="hljs-number">3</span>;  <span class="hljs-comment">// 修改谁的数据?</span><br><span class="hljs-comment">//delete bs;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述关系就可以表示这种关系，Base指针bs指向了Drive实体。我们将<code>=</code>号左边的符号成为<code>编译类型</code>而将右边的称为<code>运行类型</code>.</p><p>这就会引起一个新的问题，调用fly()的时候是调用谁的fly，而访问a的时候是访问谁的a</p><p>解答如下</p><ul><li>访问数据的时候，看编译类型。在本例中就是Base中的a;</li><li>访问函数的时候，看运行类型。在本例中就是Drive中的fly();</li></ul><p>所以：BASE的a，Drive的fly()</p><p>这就是多态</p><p>有趣的是，可以用以下方法记忆多态的特性（自己研究的)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">你看，有子类，父类，编译类型，运行类型<br><span class="hljs-deletion">-子类比父类多</span><br><span class="hljs-deletion">-函数是运行类型</span><br><span class="hljs-deletion">-数据是编译类型</span><br>那么可以类比成，<br>望远镜看一座山<br>什么意思？<br>山就是子类，望远镜就是父类指针，从父类用望远镜看子类只能看到父类的部分，<br>因为只能看到一部分，望远镜只能看到一部分山体，所以能看到父类和子类同名的函数，但是望远镜还是留在自己这里，所以访问数据的时候是从父类来看<br></code></pre></td></tr></table></figure><p><em><strong>the end</strong></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>语言共性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/18/hello-world/"/>
    <url>/2023/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
