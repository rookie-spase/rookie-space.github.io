<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++特性</title>
    <link href="/2023/04/02/C++%E7%89%B9%E6%80%A7/"/>
    <url>/2023/04/02/C++%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>注解：这个用来记录我学到的C艹特性,只是一个小本子罢了.</p><h2 id="if设置变量"><a href="#if设置变量" class="headerlink" title="if设置变量"></a>if设置变量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-type">int</span> a = <span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>);a &gt; b)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a is bigger&quot;</span> &lt;&lt; end;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>socket</title>
    <link href="/2023/04/02/socket/"/>
    <url>/2023/04/02/socket/</url>
    
    <content type="html"><![CDATA[<h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><p>2个主机用socket来建立连接</p><h2 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h2><p>将整个过程比作2个木板(A,B)墙上拉水管的过程，但是在B墙的前面还有一个人(C)</p><p><em><strong>客户端</strong></em></p><ul><li><p>创建socket</p><p><code>socket(AF_INET, SOCK_STREAM, 0)</code></p><p><strong>参数</strong>：<code>ipv4 or ipv6</code>,<code>tcp or udp</code>,<code>default value is 0</code></p><p><strong>返回值</strong>：<code>就是一个socket的编号，这个编号代表这个socket</code></p><p><strong>函数作用</strong>：<code>创建一个socket端口</code></p><blockquote><p>相当于在木板墙A上开一个方形口A_1</p></blockquote></li><li><p>连接</p><p><code>connect(sockfd, (struct sockaddr*)&amp;server, sizeof(server))</code></p><p><strong>参数</strong>：<code>从那个socket出发去连接</code>,<code>服务器的ip</code>,<code>ip的大小</code></p><p><strong>返回值</strong>：<code>0 is success</code></p><p><strong>函数作用</strong>：假设参数是A,B,C<code>那么就是让Asocket去连接Bserver.连接成功之后就可以从这个socket和B通信</code></p><blockquote><p>在木板墙A的A_1和木板墙B的某个口上拉一根水管</p></blockquote></li><li><p>收发</p><p><code>send(sockfd, message, strlen(message), 0); </code></p><p><strong>参数</strong>：<code>从那个socket出发去通信</code>,<code>要发送的东西</code>,<code>发送的大小</code>,<code>default is 0</code></p><p><strong>返回值</strong>：<code>-1 -&gt; error</code>,<code>num -&gt; 发送了多少数据</code></p><p><strong>函数作用</strong>：<code>向B发送信息</code></p><blockquote><p>从A_1灌水，送到B哪里</p></blockquote><p><code>recv(clientfd, res, 1024, 0);</code></p></li><li><p>关闭socket</p><p><code>close(sockfd);</code></p><blockquote><p>A_1的水管拉下来，把方形口补上</p></blockquote></li></ul><p><em><strong>服务端</strong></em></p><ul><li><p>创建socket</p><p><code>socket(AF_INET, SOCK_STREAM, 0)</code></p><blockquote><p>这个创建的socket是监听socket，就是看有没有客户端连接练上来的socket。</p><p>这个socket就是刚才提到的人,C</p></blockquote></li><li><p>将对应的socket绑定一个ip</p><p><code>bind(sockfd,(struct sockaddr*)&amp;server,sizeof(struct sockaddr))</code></p><p><strong>参数</strong>：<code>socket</code>,<code>给这个socket设置对应的ip</code>,<code>ip大小</code></p><p><strong>返回值</strong>：<code>0 -&gt; success</code></p><p><strong>作用</strong>：<code>给这个socket一个指定的ip，让客户端连接</code></p><blockquote><p>让C确定站位，当A墙连接过来的时候，会认为C是一个方形口</p></blockquote></li><li><p>激活这个socket</p><p><code>listen(sockfd,50)</code></p><p><strong>参数</strong>：<code>socket</code>,<code>给这个socket设置对应的ip</code>,<code>ip大小</code></p><p><strong>返回值</strong>：<code>0 -&gt; success</code></p><p><strong>作用</strong>：<code>给这个socket一个指定的ip，让客户端连接</code></p><blockquote><p>让C开始工作，并且一次能够拿住50根水管。</p></blockquote></li><li><p>从socket中接收一个请求</p><p><code>int clientfd = accept(sockfd, (struct sockaddr*)&amp;client, &amp;client_len);</code></p><p><strong>参数</strong>：<code>监听的那个socket</code>,<code>接收客户的ip</code>,<code>ip大小</code></p><p><strong>返回值</strong>：<code>一个和客户端通信的新socket</code></p><p><strong>作用</strong>：<code>从socket监听的队列中拿出第一个并且创建新的连接，这个连接用来和客户端通信，本来的那个socket继续监听</code></p><blockquote><p>墙B让C从手里的一堆水管里拿出第一个连接的水管。</p><p>并且在自己墙上开一个方形口,将这个水管和这个新开出来的方形口连接。</p><p>连接了之后，C就不再拿着这跟水管了。</p></blockquote></li><li><p>和这个请求通信</p><p><code>send(clientfd, res, strlen(res), 0); </code></p><blockquote><p>same story</p></blockquote></li><li><p>关闭socket</p><p><code>close(sockfd);</code></p><blockquote><p>same story</p></blockquote></li></ul><h2 id="示例代码link"><a href="#示例代码link" class="headerlink" title="示例代码link"></a>示例代码link</h2><blockquote><p>客户端:<a href="https://github.com/rookie-spase/socket/blob/master/normal_client.cpp">https://github.com/rookie-spase/socket/blob/master/normal_client.cpp</a></p><p>服务端:<a href="https://github.com/rookie-spase/socket/blob/master/normal_server.cpp">https://github.com/rookie-spase/socket/blob/master/normal_server.cpp</a></p></blockquote><h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h1><p>首先，一个服务器需要处理多个客户端，这就是多进程的功能。</p><p>多进程将程序拷贝一份<code>包括程序的堆栈，变量</code>，然后两个程序继续从开始拷贝的哪一行<code>fork()的哪一行</code>开始执行</p><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>将程序进行一种拷贝，这时候产生了2个进程，拷贝出来的进程成为子进程，2个进程的进程号不同，这2个进程各自执行，只是数据一样。</p><p><code>int fork()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-type">int</span> ps = fork();ps != <span class="hljs-number">0</span>)&#123;<br>       cout &lt;&lt; <span class="hljs-string">&quot;这里是父进程&quot;</span>  &lt;&lt; endl;<br>&#125;<span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;这里是子进程&quot;</span>  &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>返回值</strong>：返回子进程的pid。父进程会得到一个数，子进程会返回0；</p><p><strong>作用</strong>：拷贝程序，拷贝完之后，2个程序从这一行开始执行；</p><p>多进程流程：</p><ul><li>拷贝出一个单独的进程和客户端通信</li><li>子进程用来和客户端通信</li><li>父进程用来监听客户端，并且产生多个子进程</li></ul><blockquote><p>所以，目的很明确，子进程通信，父进程监听。</p><p>子进程因为是拷贝的父进程数据，那么子进程就有一个通信的socket和一个监听的socket</p><p>而父进程本身就具有一个监听socket和通信socket</p><p>根据上面的分析：子进程不需要监听，父进程不需要通信。</p><blockquote><p>那么在子进程就关掉监听的socket，在父进程就关掉通信的socket</p></blockquote></blockquote><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>当按下<code>ctrl+c</code>,<code>kill</code>等这些指令的时候就是一个信号，当按下<code>ctrl+c</code>的时候会发送什么？会让程序退出对吧。</p><p>现在有一个函数<code>signal</code>可以对信号的处理做出改变，就是按下<code>ctrl+c</code>的时候可以按照<code>你的方式</code>来反应</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>声明</strong>：<code>sighandler_t signal(int signum, sighandler_t handler);</code></p><p><strong>头文件</strong>：&lt;signal.h&gt;</p><p><strong>返回值</strong>：没啥意义</p><p><strong>参数</strong>：信号的编号，信号的处理方式<code>可以是函数,但是返回值只能是void*，参数必须是int，这个int用来接收信号编号</code></p><p><strong>信号的处理方式(第二个参数)</strong></p><p>SIG_IGN：忽略参数signum所指的信号。</p><p>一个自定义的处理信号的函数，信号的编号为这个自定义函数的参数。</p><p>SIG_DFL：恢复参数signum所指信号的处理方法为默认值。</p><blockquote><p>在信号处理函数中放一条<code>singal(sig,SIG_DFL);</code> 那么在第一次收到信号时会执行信号处理函数，第二次执行时会按照信号的默认行为；sig为函数的参数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> process = fork();<br>      <span class="hljs-keyword">if</span>(process != <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-built_in">signal</span>(SIGCHLD,SIG_IGN); <span class="hljs-comment">// 忽略子进程向父进程发出的信号</span><br>          <span class="hljs-built_in">close</span>(clientfd);<span class="hljs-comment">// 在父进程关闭通信socket</span><br>          <span class="hljs-keyword">continue</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-built_in">close</span>(sockfd); <span class="hljs-comment">// 在子进程关闭监听socket</span><br></code></pre></td></tr></table></figure><h2 id="示例代码link-1"><a href="#示例代码link-1" class="headerlink" title="示例代码link"></a>示例代码link</h2><blockquote><p>多进程服务端：<a href="https://github.com/rookie-spase/socket/blob/master/duojincheng_server.cpp">https://github.com/rookie-spase/socket/blob/master/duojincheng_server.cpp</a></p></blockquote><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>刚才提到的多进程，是将程序拷贝一份，但是这样的开销很大。</p><p>多线程可以在同一个进程下同时执行多个函数，也可以满足接收多个用户的需求。</p><p>一个进程下同时执行多个函数，那么多个函数可能会同时改变一个变量，所以在多线程情况下，尽量用拷贝传递参数。</p><h2 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h2><p>pthread中的<code>pthread_create</code>函数可以创造一个子线程。同之前的逻辑父进程监听，子线程执行。但是不需要关闭任何socket，因为在一个进程下。</p><p><code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);</code></p><p><strong>头文件</strong>：#include &lt;pthread.h&gt;</p><p><strong>参数：</strong></p><ul><li><p>thread：这是一个值<code>可以看作int</code>，用来保存创建出来的线程的编号。是<code>pthread_create</code>执行了之后才有的值</p></li><li><p>attr：设置线程属性。可以将此参数设置为 NULL<code>default</code>.</p></li><li><p>start_routine：线程要执行的函数。</p></li><li><p>arg：传递给线程函数的参数。</p><blockquote><p>从定义可以看出，函数只能是<code>void * function(void*)</code>类型的，那么传递参数过去的时候，只能是先转换成void*再传递</p></blockquote></li></ul><h2 id="和C-库的async和future对比"><a href="#和C-库的async和future对比" class="headerlink" title="和C++库的async和future对比"></a>和C++库的async和future对比</h2><p><code>async</code>和<code>future</code>是C++11中并发库的一个工具，它也提供了多线程的用法。但是更好用</p><p>如果要<strong>启动一个线程</strong>，那么<code>async(launch::async,function_name);</code>就能启动function_name函数了</p><p>​其中，第一个参数表示现在就启动线程，第二个参数表示线程执行那个函数</p><p>而<strong>获得这个函数的返回值</strong>，只需要<code>future&lt;void&gt; it(async(launch::async,function_name));it.get();</code>就可以了。</p><p>操作会简单的多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(buf));<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(client);<br>    <span class="hljs-type">int</span> client = <span class="hljs-built_in">accept</span>(jianting,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;client,&amp;client);<br>    <span class="hljs-keyword">if</span>(client)&#123;<br>        <span class="hljs-type">char</span> new_buf[<span class="hljs-number">1024</span>];<br><span class="hljs-function">future&lt;<span class="hljs-type">void</span>&gt; <span class="hljs-title">it</span><span class="hljs-params">(async(launch::async,client_function,client,new_buf))</span></span>;<br>        <span class="hljs-comment">// pthread_create(id,NULL,client_function,(void*)(mystructs));</span><br>&#125;<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="示例代码link-2"><a href="#示例代码link-2" class="headerlink" title="示例代码link"></a>示例代码link</h2><blockquote><p>测试代码：<a href="https://github.com/rookie-spase/socket/blob/master/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95.cpp">https://github.com/rookie-spase/socket/blob/master/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95.cpp</a></p></blockquote><h1 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h1><p>业务就是一个函数，这个函数为客户提供{身份验证，查询数据}服务这类的程序。</p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">&lt;code&gt;1&lt;/code&gt;&lt;account&gt;ads&lt;/account&gt;&lt;pwd&gt;156324&lt;/pwd&gt;<br></code></pre></td></tr></table></figure><p>这就是xml，尖括号里面的东西可以随意指定。</p><hr><blockquote><p>所以就是客户端通过xml发账号密码，服务端接收处理。这就是简单的业务</p></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>一个服务器应该多种业务，那么就应该有应该判断，这个判断来辨别你需要的业务是那个。</p><p>所以用case分支处理业务，也非常直观。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">recv</span>(client,recv,<span class="hljs-built_in">sizeof</span>(recv),<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> code;<br><span class="hljs-built_in">getfromxml</span>(&amp;code,recv,<span class="hljs-string">&quot;code&quot;</span>);<br><span class="hljs-keyword">switch</span>(code)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">process_account</span>(recv,send);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;none&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接收客户端的数据保存到recv中，从recv中的数据提取出编号，根据{编号和recv}来考虑要向客户端发什么</p></blockquote><h2 id="示例代码link-3"><a href="#示例代码link-3" class="headerlink" title="示例代码link"></a>示例代码link</h2><blockquote><p>服务端:<a href="https://github.com/rookie-spase/socket/blob/master/%E4%B8%9A%E5%8A%A1_%E5%A4%9A%E7%BA%BF%E7%A8%8B.cpp">https://github.com/rookie-spase/socket/blob/master/%E4%B8%9A%E5%8A%A1_%E5%A4%9A%E7%BA%BF%E7%A8%8B.cpp</a></p></blockquote><h1 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h1><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><blockquote><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>介绍</title>
    <link href="/2023/03/28/%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/03/28/%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>博主目前专科大一，快学完四大件，也会一点框架使用。现在目前没有方向就想着写写博客。</p><p>博客内容：</p><ul><li>C++的心得</li><li>四大件的总结</li><li>框架的项目介绍</li><li>屁大点事</li></ul><p>谢谢观看</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象三大特性</title>
    <link href="/2023/03/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2023/03/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>三大特性：封装，继承，多态</p></blockquote><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>一个struct就是几个数据类型的集合。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    A some_one;<br>    some_one.age = <span class="hljs-number">21</span>;<br>    some_one.name = <span class="hljs-string">&quot;ZhangSi&quot;</span>;<br>    some_one.work_place = <span class="hljs-string">&quot;ShangHai&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>main函数相对于结构体A来说是外人，main在结构体A之外。而main作为一个外人，将some_one中的数据给更改了。</p><p>问题：一个人的{名字,年龄,工作地点}被外人更改了；</p><p>解决办法：使用class加上访问控制</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Class是数据类型和函数的集合，class的数据类型和函数统称为<code>成员</code>，class可以指定哪些可以被外人看见。<br>上面的classA，将数据成员指定为private，意思是A的这三个成员不能被外人访问。<br>若是<code>public</code>，那么效果和structA一样。</p><p>所以，现在介绍的<code>访问控制符</code>有</p><ul><li>private</li><li>public</li></ul><p>还有个是<code>protected</code>，这个关键字需要和继承的特性一起说。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>那么，既然数据成员已经不能被外人直接修改，也不能被外人直接访问。</p><p>给这个<code>classA</code>的成员赋值的方法就需要一个叫<code>构造函数</code>的东西。</p><blockquote><p>构造函数就是代替了赋值；外界传递参数给这个函数，这个函数利用参数给自己的成员赋值</p></blockquote><ul><li>构造函数需要从外界获取参数-&gt;构造函数是public的</li><li>构造函数的名字和类名一样</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span>* name;<br>    <span class="hljs-type">char</span>* work_place;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> age,<span class="hljs-type">char</span>* name,<span class="hljs-type">char</span>* work_place)&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name  = name;<br>        <span class="hljs-keyword">this</span>.work_place = work_place;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*  更好的写法,结果是一样的，但这个效果要好一些</span><br><span class="hljs-comment">    A(int ae,char* nae,char* _place)</span><br><span class="hljs-comment">    :age(ae),name(nae),work_place(_place)&#123;&#125;</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/* 更更好的写法</span><br><span class="hljs-comment">    A(const int&amp; ae,const char* nae,const char* _place)</span><br><span class="hljs-comment">    :age(ae),name(nae),work_place(_place)&#123;&#125;</span><br><span class="hljs-comment">    */</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">some_one</span><span class="hljs-params">(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;ZhangSi&quot;</span>,<span class="hljs-string">&quot;ShangHai&quot;</span>)</span></span>;<span class="hljs-comment">//    就创建好了</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承代表的是一种属于关系</p><blockquote><p>鹰是一种鸟，鸟都会飞，鹰也将会飞。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>&#123;<span class="hljs-comment">// 称为基类或者父类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> further_count;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Grab_WithLeg</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">owl</span>:<span class="hljs-keyword">public</span> Bird&#123;<span class="hljs-comment">// 称为派生类或者子类</span><br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    owl o1;<br>    o1.<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">// ok,调用Bird的fly()</span><br>    o1.<span class="hljs-built_in">Grab_WithLeg</span>(); <span class="hljs-comment">// ok,调用Bird的Grab_WithLeg()</span><br>    o1.further_count = <span class="hljs-number">3</span>; <span class="hljs-comment">// error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类owl继承自父类Bird，父类的<code>public</code>成员和<code>protected</code>成员可以让子类访问修改；</p><p>这里就可以抛出<code>protected</code>的用法了</p><ul><li><code>protected</code>指成员可以被子类访问和修改，但不能被外人访问和修改</li></ul><p>继承特点</p><ul><li><p>子类会继承父类所有数据和函数，但不是所有数据和函数子类都可以访问和修改</p></li><li><p>父类和子类关系图，如果要调用函数，那么</p><ol><li>在子类中找</li><li>在父类中找</li><li>在父类外找</li><li>报错</li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">--------------------------------------------------------<br>|<span class="hljs-string">父类   </span>|<br>|<span class="hljs-string"></span>|<br>|<span class="hljs-string"></span>|<br>|<span class="hljs-string">-----------------------      </span>|<br>|<span class="hljs-string"></span>|<span class="hljs-string">子类   </span>|<span class="hljs-string"></span>|<br>|<span class="hljs-string"></span>|<span class="hljs-string"></span>|<span class="hljs-string"></span>|<br>|<span class="hljs-string">--------------------------------------------------------</span>|<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">owl</span>:<span class="hljs-keyword">public</span> Bird&#123;<span class="hljs-comment">// 称为派生类或者子类</span><br>    <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    owl o1;<br>    o1.<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">// 调用owl的fly()，而不是Bird的fly</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="子类和父类的关系"><a href="#子类和父类的关系" class="headerlink" title="子类和父类的关系"></a>子类和父类的关系</h2><p>首先，子类包含父类的成员，那么就表明子类的成员一定比父类多。</p><p>所以<code>我们总能在子类中找到属于父类的部分</code>，这就是关系</p><p>如何表示这种<code>在子类中找到父类</code>的关系呢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drive</span>:<span class="hljs-keyword">public</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Base* bs = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Drive</span>();<br>bs-&gt;<span class="hljs-built_in">fly</span>();  <span class="hljs-comment">//调用谁的fly()?</span><br>    bs-&gt;a = <span class="hljs-number">3</span>;  <span class="hljs-comment">// 修改谁的数据?</span><br><span class="hljs-comment">//delete bs;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述关系就可以表示这种关系，Base指针bs指向了Drive实体。我们将<code>=</code>号左边的符号成为<code>编译类型</code>而将右边的称为<code>运行类型</code>.</p><p>这就会引起一个新的问题，调用fly()的时候是调用谁的fly，而访问a的时候是访问谁的a</p><p>解答如下</p><ul><li>访问数据的时候，看编译类型。在本例中就是Base中的a;</li><li>访问函数的时候，看运行类型。在本例中就是Drive中的fly();</li></ul><p>所以：BASE的a，Drive的fly()</p><p>这就是多态</p><p>有趣的是，可以用以下方法记忆多态的特性（自己研究的)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">你看，有子类，父类，编译类型，运行类型<br><span class="hljs-deletion">-子类比父类多</span><br><span class="hljs-deletion">-函数是运行类型</span><br><span class="hljs-deletion">-数据是编译类型</span><br>那么可以类比成，<br>望远镜看一座山<br>什么意思？<br>山就是子类，望远镜就是父类指针，从父类用望远镜看子类只能看到父类的部分，<br>因为只能看到一部分，望远镜只能看到一部分山体，所以能看到父类和子类同名的函数，但是望远镜还是留在自己这里，所以访问数据的时候是从父类来看<br></code></pre></td></tr></table></figure><p><em><strong>the end</strong></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>语言共性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/18/hello-world/"/>
    <url>/2023/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
